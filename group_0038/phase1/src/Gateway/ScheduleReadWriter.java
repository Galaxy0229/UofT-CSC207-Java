package Gateway;

import Entity.PermanentUser;
import Entity.Schedule;
import Entity.Template;
import UseCase.ScheduleManager;
import UseCase.UserManager;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * A representation of the class to save and read schedule data.
 *
 * @author Kexin Sha
 * @author Jessica Wang
 * @author Hilda Wang
 */
public class ScheduleReadWriter {

    /**
     * Save the information generated by clients to the files called ScheduleData.ser and ScheduleData2.ser
     *
     * It create a new file ScheduleData.ser and stored the hashmap scheduleTempMap in it.
     * @param schedulesList the Hashmap with key (schedule id) and value (Schedule)
     * @param scheduleTempMap the Hashmap with key (schedule id) and value (temp id)
     */

    public void saveScheduleToFile(HashMap<String, List<Schedule>> schedulesList, HashMap<Integer, Integer> scheduleTempMap){
        try
        {
            FileOutputStream fos = new FileOutputStream("phase1/ScheduleData.ser");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(schedulesList);
            oos.close();
            fos.close();

            FileOutputStream fos2 = new FileOutputStream("phase1/ScheduleData2.ser");
            ObjectOutputStream oos2 = new ObjectOutputStream(fos2);
            oos2.writeObject(scheduleTempMap);
            oos2.close();
            fos2.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

    }


    /**
     * read the file ScheduleData.ser and return the hashmap with key (schedule id) and value (schedule) from the file.
     *
     * If the file is empty, it will generate an new empty hashmap and return it.
     * @return the Hashmap schedulesList that stored in ScheduleData.ser.
     */
    public HashMap<String, List<Schedule>> readScheduleListFromFile(){

        HashMap<String, List<Schedule>> schedulesList = new HashMap<>();

        try
        {
            File file = new File("phase1/ScheduleData.ser");
            file.createNewFile();
            FileInputStream fis = new FileInputStream(file);
            ObjectInputStream ois = new ObjectInputStream(fis);

            schedulesList = (HashMap<String, List<Schedule>>) ois.readObject();
            ois.close();
            fis.close();
        }
        catch(EOFException e){
            schedulesList = new HashMap<>();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return schedulesList;

    }


    /**
     * read the file ScheduleData2.ser and return the hashmap with key (schedule id) and value (template id) from the file.
     *
     * If the file is empty, it will generate an new empty hashmap and return it.
     * @return the Hashmap scheduleTempMap that stored in ScheduleData2.ser.
     */

    public HashMap<Integer, Integer> readScheduleTempFromFile(){

        HashMap<Integer, Integer> scheduleTempMap = new HashMap<>();

        try
        {
            File file = new File("phase1/ScheduleData2.ser");
            file.createNewFile();
            FileInputStream fis = new FileInputStream(file);
            ObjectInputStream ois = new ObjectInputStream(fis);

            scheduleTempMap = (HashMap<Integer, Integer>) ois.readObject();
            ois.close();
            fis.close();
        }
        catch(EOFException e){
            scheduleTempMap = new HashMap<>();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return scheduleTempMap;

    }

}
