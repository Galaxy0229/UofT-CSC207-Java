package Gateway;

import Entity.DailyTemplate;
import Entity.MonthlyTemplate;
import Entity.PermanentUser;
import Entity.Template;
import UseCase.TemplateManager;
import UseCase.UserManager;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * A representation of the class to save and read template data.
 *
 * @author Christine
 * @author Chuanrun Zhang
 * @author Siqing Xu
 */
public class TempReadWriter {

    /**
     * Save the information generated by clients to the file called TemplateData.ser
     *
     * It create a new file TemplateData.ser and stored the hashmap IdToTemplate in it.
     * @param IdToTemplate the Hashmap with key (template id) and value (template)
     */
    public void saveTempToFile(HashMap<Integer, Template> IdToTemplate) {
        try {
            FileOutputStream fos = new FileOutputStream("phase1/TemplateData.ser");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(IdToTemplate);
            oos.close();
            fos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    /**
     * read the file TemplateData.ser and return the hashmap with key (template id) and value (template) from the file.
     *
     * If the file is empty, it will generate an new empty hashmap and return it.
     * @return the Hashmap IdToTemplate that stored in TemplateData.ser.
     */
    public HashMap<Integer, Template> readTempFromFile() {

        HashMap<Integer, Template> IdToTemplate = new HashMap<>();

        try {
            File file = new File("phase1/TemplateData.ser");
            file.createNewFile();
            FileInputStream fis = new FileInputStream(file);
            ObjectInputStream ois = new ObjectInputStream(fis);

            IdToTemplate = (HashMap<Integer, Template>) ois.readObject();
            ois.close();
            fis.close();
        } catch (EOFException e) {
            IdToTemplate = new HashMap<>();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return IdToTemplate;


    }
}
